<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
	<!-- 
		Log4j는 자바기반의 로깅 유틸리티로 Apache에서 만든 오픈소스 라이브러리라고 한다. 
		Log4j는 옵션 설정을 통해서 선택적으로 로그를 남기거나 특정 파일에 로그를 생성하는 등 다양한 이점을 가지고 있다. 
		한번 설정을 해놓으면 개발할 때 편하다. 
		sql문이 뭐가 찍히고, 
			어떤 값이 담겨오는 지 궁금한데 궁금 한 곳마다 system.out.prtinln()을 찍고 필요 없으면 또 찾아서 지우고, 
			너무 귀찮다. 
		그 귀찮음을 덜기 위해서 개발 전에 log4j를 설정한다.
	 -->
	
	<!--
	Log4j 레벨
	
	로그 레벨		설명
	======================================================================================
	FATAL		아주 심각한 에러가 발생한 상태를 나타낸다. 
	ERROR		어떠한 요청을 처리하는 중 문제가 발생한 상태를 나타낸다.
	WARN		프로그램의 실행에는 문제가 없지만, 향후 시스템 에러의 원인이 될 수 있는 경고성 메시지를 나타낸다.
	INFO		어떠한 상태변경과 같은 정보성 메시지를 나타낸다.
	DEBUG		개발시 디버그 용도로 사용하는 메시지를 나타낸다.
	TRACE		디버그 레벨이 너무 광범위한것을 해결하기 위해서 좀 더 상세한 이벤트를 나타낸다.
	======================================================================================
	
	level value 값에 적혀 있는 것들이다. 
	위의 순서대로 높은 높은 레벨을 가지며, 
		출력 레벨 설정에 따라 설정 레벨 이상의 로그가 출력된다. 
	예를 들어 출력 레벨을 INFO라고 설정했다면, 
		INFO를 포함한 INFO보다 높은 레벨인 WARN, ERROR, FATAL이 출력된다. 
	-->
	<!--
	Log4j 구성요소
	======================================================================================
	요소			설명
	======================================================================================
	Logger		출력할 메시지를 Appender에 전달한다.
	Appender	전달된 로그를 어디에 출력할 지 결정한다. (콘솔 출력, 파일 기록, DB 저장 등)
	Layout		로그를 어떤 형식으로 출력할 지 결정한다.
	======================================================================================
	Logger 는 실제 로그 기능을 수행하는 객체로 Name을 가지고 사용된다. 
	로그 출력 레벨을 설정할 수 있고, 
		0개 이상의 Appender를 지정할 수 있다. 
	입력받은 로깅 메시지는 로그 레벨에 따라 Appender로 전달 된다. 
	기본적으로 최상위 logger인 Root logger 을 설정해 주어야 한다. 
	
	======================================================================================
	요소				설명
	======================================================================================
	jdbc.sqlonly	SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다.
	jdbc.sqltiming	SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다.
	jdbc.audit		ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다.
	jdbc.resultset	ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다.
	======================================================================================
	Appender 는 로그를 출력할 위치, 
		출력 형식 등을 지정할 수 있다. 
	여러 종류의 Appender가 있지만 몇개만 알아보자. 
	아래 표의 4개 말고도 SMTPAppender, DBAppender 등이 있는데, 
		이걸 이용하면 로그를 원격 위치에 기록할 수도 있다. 
	필요하면 찾아보자. 
	아 그리고 주의해야 할 것이 있다. 
	Appender태그는 Logger태그들보다 위에 있어야 한다.
	======================================================================================
	요소							설명
	======================================================================================
	ConsoleAppender				org.apache.log4j.ConsoleAppender
								콘솔에 로그 메시지를 출력한다.
	FilerAppender				org.apache.log4j.FilerAppender
								로그 메시지를 지정된 파일에 기록한다.
	RollingFileAppender			org.apache.log4j.RollingFileAppender
								파일 크기가 일정 수준 이상이 되면 기존 파일을 백업파일로 두고 처음부터 다시 기록한다.
	DailyRollingFilerAppender	org.apache.log4j.Daily.Rolling.File.Appender
								일정 기간 단위로 로그 파일을 생성하고 기록한다.
	======================================================================================
	
	LayOut(8행)은 로그를 출력하는 형태를 만들 수 있다. 
	PatternLayout을 이용하는게 가장 적합하다. 
	로그의 출력 형태, 
		Layout을 자신이 원하는 형식으로 바꿀 수 있다.
	ConversionPattern 의 패턴들에 대해서 알아보자. 
	======================================================================================
	패턴		설명
	======================================================================================
	%m		로그 내용 출력
	%p		debug, info, warn, error 등의 priority 출력
	%r		어플리케이션 시작 후 이벤트가 발생하는 시점까지의 경과시간. (밀리세컨드로 출력)
	%c		package 출력
	%C		클래스명 출력
	%d		이벤트 발생 날짜 출력
	%n		개행문자(\n) 출력
	%M		로깅이 발생한 method 이름 출력
	%F		로깅이 발생한 프로그램 파일명 출력
	%l		로깅이 발생한 caller 정보 출력
	%L		로깅이 발생한 caller 라인수 출력
	%x		로깅이 발생한 thread와 관련된 NDC 출력
	%X		로깅이 발생한 thread와 관련된 MDC 출력
	%		% 출력 표시
	%t		쓰레드 이름 출력
	======================================================================================
	
	-->
	
	<!--
	2가지의 Appender ( console, console-infolog )와 기존의 4가지 Logger와 추가된 Logger가 있다. 
	기존의 4가지 Logger(3rdparty Loggers)는 삭제해줘도 된다. 
	Logger마다 메세지를 전달하는 Appender가 다르니 잘 확인하자. 
	그리고 상속을 하지 않는(Additivity=false) 이유는 로그가 2번 출력되서 보통 상속하지 않는다.
	서버를 돌리면 기존 4가지 Logger를 지우지 않았다면 그대로 출력되고, 지웠다면 빨간 글씨만 출력될 것이다. 
	-->
	<!-- Appenders -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout>
	</appender>
	
	<!-- *추가* -->
	<appender name="console-infolog" class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%d %5p %m%n"/>
		</layout>
	</appender>
	
	<!-- Application Loggers -->
	<logger name="com.mvcbbs" additivity="false">
		<level value="debug" />
		<appender-ref ref="console"/>
	</logger>
	
	<!-- 3rdparty Loggers -->
<!-- 	<logger name="org.springframework.core"> -->
<!-- 		<level value="info" /> -->
<!-- 	</logger> -->
	
<!-- 	<logger name="org.springframework.beans"> -->
<!-- 		<level value="info" /> -->
<!-- 	</logger> -->
	
<!-- 	<logger name="org.springframework.context"> -->
<!-- 		<level value="info" /> -->
<!-- 	</logger> -->

<!-- 	<logger name="org.springframework.web"> -->
<!-- 		<level value="info" /> -->
<!-- 	</logger> -->

	<!-- SQL Logger -->
	<logger name="jdbc.sqltiming" additivity="false">
		<level value="warn" />
		<appender-ref ref="console"/> 
	</logger>
	<logger name="jdbc.sqlonly" additivity="false"> 
		<level value="info"/> 
		<appender-ref ref="console"/> 
	</logger>
	<logger name="jdbc.audit" additivity="false"> 
		<level value="warn"/>  
		<appender-ref ref="console"/> 
	</logger> 
	<logger name="jdbc.resultset" additivity="false">
		<level value="warn" />
		<appender-ref ref="console"/> 
	</logger>
	<logger name="jdbc.resultsettable" additivity="false"> 
		<level value="info"/>  
		<appender-ref ref="console"/> 
	</logger> 

	<!-- Root Logger -->
	<root>
<!-- 		<priority value="warn" /> -->
		<priority value="off" />
		<appender-ref ref="console" />
	</root>
	
</log4j:configuration>
